
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002728  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002858  08002858  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002858  08002858  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002858  08002858  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000030  08002890  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002890  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d27  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001945  00000000  00000000  00028d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167c1  00000000  00000000  0002b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa3e  00000000  00000000  00042179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823b3  00000000  00000000  0004cbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cef6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  000cefc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	0800281c 	.word	0x0800281c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	0800281c 	.word	0x0800281c

0800014c <clock>:
 */

#include "global.h"
#include "clock.h"

void clock() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    second++;
 8000150:	4b13      	ldr	r3, [pc, #76]	; (80001a0 <clock+0x54>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a12      	ldr	r2, [pc, #72]	; (80001a0 <clock+0x54>)
 8000158:	6013      	str	r3, [r2, #0]
    if (second >= 60) {
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <clock+0x54>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b3b      	cmp	r3, #59	; 0x3b
 8000160:	dd07      	ble.n	8000172 <clock+0x26>
        second = 0;
 8000162:	4b0f      	ldr	r3, [pc, #60]	; (80001a0 <clock+0x54>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
        minute++;
 8000168:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <clock+0x58>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	3301      	adds	r3, #1
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <clock+0x58>)
 8000170:	6013      	str	r3, [r2, #0]
    }
    if (minute >= 60) {
 8000172:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <clock+0x58>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b3b      	cmp	r3, #59	; 0x3b
 8000178:	dd07      	ble.n	800018a <clock+0x3e>
        minute = 0;
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <clock+0x58>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
        hour++;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <clock+0x5c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	3301      	adds	r3, #1
 8000186:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <clock+0x5c>)
 8000188:	6013      	str	r3, [r2, #0]
    }
    if (hour >= 24) {
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <clock+0x5c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b17      	cmp	r3, #23
 8000190:	dd02      	ble.n	8000198 <clock+0x4c>
        hour = 0;
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <clock+0x5c>)
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
    }
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	20000020 	.word	0x20000020
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	20000018 	.word	0x20000018

080001ac <updateClockBuffer>:

int index_led = 0;
int led_buffer[4]= { 1 , 2 , 3 , 4 };


void updateClockBuffer() {
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
    if (hour < 10) {
 80001b0:	4b29      	ldr	r3, [pc, #164]	; (8000258 <updateClockBuffer+0xac>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b09      	cmp	r3, #9
 80001b6:	dc06      	bgt.n	80001c6 <updateClockBuffer+0x1a>
        led_buffer[0] = 0;
 80001b8:	4b28      	ldr	r3, [pc, #160]	; (800025c <updateClockBuffer+0xb0>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
        led_buffer[1] = hour;
 80001be:	4b26      	ldr	r3, [pc, #152]	; (8000258 <updateClockBuffer+0xac>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a26      	ldr	r2, [pc, #152]	; (800025c <updateClockBuffer+0xb0>)
 80001c4:	6053      	str	r3, [r2, #4]
    }
    if (hour >= 10) {
 80001c6:	4b24      	ldr	r3, [pc, #144]	; (8000258 <updateClockBuffer+0xac>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b09      	cmp	r3, #9
 80001cc:	dd18      	ble.n	8000200 <updateClockBuffer+0x54>
        led_buffer[0] = hour / 10;
 80001ce:	4b22      	ldr	r3, [pc, #136]	; (8000258 <updateClockBuffer+0xac>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a23      	ldr	r2, [pc, #140]	; (8000260 <updateClockBuffer+0xb4>)
 80001d4:	fb82 1203 	smull	r1, r2, r2, r3
 80001d8:	1092      	asrs	r2, r2, #2
 80001da:	17db      	asrs	r3, r3, #31
 80001dc:	1ad3      	subs	r3, r2, r3
 80001de:	4a1f      	ldr	r2, [pc, #124]	; (800025c <updateClockBuffer+0xb0>)
 80001e0:	6013      	str	r3, [r2, #0]
        led_buffer[1] = hour % 10;
 80001e2:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <updateClockBuffer+0xac>)
 80001e4:	6819      	ldr	r1, [r3, #0]
 80001e6:	4b1e      	ldr	r3, [pc, #120]	; (8000260 <updateClockBuffer+0xb4>)
 80001e8:	fb83 2301 	smull	r2, r3, r3, r1
 80001ec:	109a      	asrs	r2, r3, #2
 80001ee:	17cb      	asrs	r3, r1, #31
 80001f0:	1ad2      	subs	r2, r2, r3
 80001f2:	4613      	mov	r3, r2
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	4413      	add	r3, r2
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	1aca      	subs	r2, r1, r3
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <updateClockBuffer+0xb0>)
 80001fe:	605a      	str	r2, [r3, #4]
    }
    if (minute < 10) {
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <updateClockBuffer+0xb8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b09      	cmp	r3, #9
 8000206:	dc06      	bgt.n	8000216 <updateClockBuffer+0x6a>
        led_buffer[2] = 0;
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <updateClockBuffer+0xb0>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
        led_buffer[3] = minute;
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <updateClockBuffer+0xb8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a12      	ldr	r2, [pc, #72]	; (800025c <updateClockBuffer+0xb0>)
 8000214:	60d3      	str	r3, [r2, #12]
    }
    if (minute >= 10) {
 8000216:	4b13      	ldr	r3, [pc, #76]	; (8000264 <updateClockBuffer+0xb8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b09      	cmp	r3, #9
 800021c:	dd18      	ble.n	8000250 <updateClockBuffer+0xa4>
        led_buffer[0] = minute / 10;
 800021e:	4b11      	ldr	r3, [pc, #68]	; (8000264 <updateClockBuffer+0xb8>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0f      	ldr	r2, [pc, #60]	; (8000260 <updateClockBuffer+0xb4>)
 8000224:	fb82 1203 	smull	r1, r2, r2, r3
 8000228:	1092      	asrs	r2, r2, #2
 800022a:	17db      	asrs	r3, r3, #31
 800022c:	1ad3      	subs	r3, r2, r3
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <updateClockBuffer+0xb0>)
 8000230:	6013      	str	r3, [r2, #0]
        led_buffer[1] = minute % 10;
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <updateClockBuffer+0xb8>)
 8000234:	6819      	ldr	r1, [r3, #0]
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <updateClockBuffer+0xb4>)
 8000238:	fb83 2301 	smull	r2, r3, r3, r1
 800023c:	109a      	asrs	r2, r3, #2
 800023e:	17cb      	asrs	r3, r1, #31
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	4613      	mov	r3, r2
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	4413      	add	r3, r2
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	1aca      	subs	r2, r1, r3
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <updateClockBuffer+0xb0>)
 800024e:	605a      	str	r2, [r3, #4]
    }
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000018 	.word	0x20000018
 800025c:	20000000 	.word	0x20000000
 8000260:	66666667 	.word	0x66666667
 8000264:	2000001c 	.word	0x2000001c

08000268 <display7SEG>:

#include <control_7SEG.h>
#include "main.h"
#include <clock_buffer.h>

void display7SEG(int num) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d109      	bne.n	800028a <display7SEG+0x22>

		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	2140      	movs	r1, #64	; 0x40
 800027a:	48b1      	ldr	r0, [pc, #708]	; (8000540 <display7SEG+0x2d8>)
 800027c:	f001 fab8 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB0_Pin|PB1_Pin|PB2_Pin|PB3_Pin|PB4_Pin|PB5_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	213f      	movs	r1, #63	; 0x3f
 8000284:	48ae      	ldr	r0, [pc, #696]	; (8000540 <display7SEG+0x2d8>)
 8000286:	f001 fab3 	bl	80017f0 <HAL_GPIO_WritePin>
	}
	if (num == 1) {
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d122      	bne.n	80002d6 <display7SEG+0x6e>
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2101      	movs	r1, #1
 8000294:	48aa      	ldr	r0, [pc, #680]	; (8000540 <display7SEG+0x2d8>)
 8000296:	f001 faab 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2102      	movs	r1, #2
 800029e:	48a8      	ldr	r0, [pc, #672]	; (8000540 <display7SEG+0x2d8>)
 80002a0:	f001 faa6 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2104      	movs	r1, #4
 80002a8:	48a5      	ldr	r0, [pc, #660]	; (8000540 <display7SEG+0x2d8>)
 80002aa:	f001 faa1 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	2108      	movs	r1, #8
 80002b2:	48a3      	ldr	r0, [pc, #652]	; (8000540 <display7SEG+0x2d8>)
 80002b4:	f001 fa9c 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2110      	movs	r1, #16
 80002bc:	48a0      	ldr	r0, [pc, #640]	; (8000540 <display7SEG+0x2d8>)
 80002be:	f001 fa97 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2120      	movs	r1, #32
 80002c6:	489e      	ldr	r0, [pc, #632]	; (8000540 <display7SEG+0x2d8>)
 80002c8:	f001 fa92 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2140      	movs	r1, #64	; 0x40
 80002d0:	489b      	ldr	r0, [pc, #620]	; (8000540 <display7SEG+0x2d8>)
 80002d2:	f001 fa8d 	bl	80017f0 <HAL_GPIO_WritePin>
	}
	if (num == 2) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d122      	bne.n	8000322 <display7SEG+0xba>
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	2101      	movs	r1, #1
 80002e0:	4897      	ldr	r0, [pc, #604]	; (8000540 <display7SEG+0x2d8>)
 80002e2:	f001 fa85 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2102      	movs	r1, #2
 80002ea:	4895      	ldr	r0, [pc, #596]	; (8000540 <display7SEG+0x2d8>)
 80002ec:	f001 fa80 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2104      	movs	r1, #4
 80002f4:	4892      	ldr	r0, [pc, #584]	; (8000540 <display7SEG+0x2d8>)
 80002f6:	f001 fa7b 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	4890      	ldr	r0, [pc, #576]	; (8000540 <display7SEG+0x2d8>)
 8000300:	f001 fa76 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2110      	movs	r1, #16
 8000308:	488d      	ldr	r0, [pc, #564]	; (8000540 <display7SEG+0x2d8>)
 800030a:	f001 fa71 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, GPIO_PIN_SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	488b      	ldr	r0, [pc, #556]	; (8000540 <display7SEG+0x2d8>)
 8000314:	f001 fa6c 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2140      	movs	r1, #64	; 0x40
 800031c:	4888      	ldr	r0, [pc, #544]	; (8000540 <display7SEG+0x2d8>)
 800031e:	f001 fa67 	bl	80017f0 <HAL_GPIO_WritePin>

	}
	if (num == 3) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d122      	bne.n	800036e <display7SEG+0x106>
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	4884      	ldr	r0, [pc, #528]	; (8000540 <display7SEG+0x2d8>)
 800032e:	f001 fa5f 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2102      	movs	r1, #2
 8000336:	4882      	ldr	r0, [pc, #520]	; (8000540 <display7SEG+0x2d8>)
 8000338:	f001 fa5a 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2104      	movs	r1, #4
 8000340:	487f      	ldr	r0, [pc, #508]	; (8000540 <display7SEG+0x2d8>)
 8000342:	f001 fa55 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2108      	movs	r1, #8
 800034a:	487d      	ldr	r0, [pc, #500]	; (8000540 <display7SEG+0x2d8>)
 800034c:	f001 fa50 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2110      	movs	r1, #16
 8000354:	487a      	ldr	r0, [pc, #488]	; (8000540 <display7SEG+0x2d8>)
 8000356:	f001 fa4b 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	2120      	movs	r1, #32
 800035e:	4878      	ldr	r0, [pc, #480]	; (8000540 <display7SEG+0x2d8>)
 8000360:	f001 fa46 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2140      	movs	r1, #64	; 0x40
 8000368:	4875      	ldr	r0, [pc, #468]	; (8000540 <display7SEG+0x2d8>)
 800036a:	f001 fa41 	bl	80017f0 <HAL_GPIO_WritePin>
	}
	if (num == 4) {
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b04      	cmp	r3, #4
 8000372:	d122      	bne.n	80003ba <display7SEG+0x152>
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2101      	movs	r1, #1
 8000378:	4871      	ldr	r0, [pc, #452]	; (8000540 <display7SEG+0x2d8>)
 800037a:	f001 fa39 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2102      	movs	r1, #2
 8000382:	486f      	ldr	r0, [pc, #444]	; (8000540 <display7SEG+0x2d8>)
 8000384:	f001 fa34 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2104      	movs	r1, #4
 800038c:	486c      	ldr	r0, [pc, #432]	; (8000540 <display7SEG+0x2d8>)
 800038e:	f001 fa2f 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2108      	movs	r1, #8
 8000396:	486a      	ldr	r0, [pc, #424]	; (8000540 <display7SEG+0x2d8>)
 8000398:	f001 fa2a 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2110      	movs	r1, #16
 80003a0:	4867      	ldr	r0, [pc, #412]	; (8000540 <display7SEG+0x2d8>)
 80003a2:	f001 fa25 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	4865      	ldr	r0, [pc, #404]	; (8000540 <display7SEG+0x2d8>)
 80003ac:	f001 fa20 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2140      	movs	r1, #64	; 0x40
 80003b4:	4862      	ldr	r0, [pc, #392]	; (8000540 <display7SEG+0x2d8>)
 80003b6:	f001 fa1b 	bl	80017f0 <HAL_GPIO_WritePin>
	}
	if (num == 5) {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b05      	cmp	r3, #5
 80003be:	d122      	bne.n	8000406 <display7SEG+0x19e>
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2101      	movs	r1, #1
 80003c4:	485e      	ldr	r0, [pc, #376]	; (8000540 <display7SEG+0x2d8>)
 80003c6:	f001 fa13 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2102      	movs	r1, #2
 80003ce:	485c      	ldr	r0, [pc, #368]	; (8000540 <display7SEG+0x2d8>)
 80003d0:	f001 fa0e 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2104      	movs	r1, #4
 80003d8:	4859      	ldr	r0, [pc, #356]	; (8000540 <display7SEG+0x2d8>)
 80003da:	f001 fa09 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	2108      	movs	r1, #8
 80003e2:	4857      	ldr	r0, [pc, #348]	; (8000540 <display7SEG+0x2d8>)
 80003e4:	f001 fa04 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2110      	movs	r1, #16
 80003ec:	4854      	ldr	r0, [pc, #336]	; (8000540 <display7SEG+0x2d8>)
 80003ee:	f001 f9ff 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2120      	movs	r1, #32
 80003f6:	4852      	ldr	r0, [pc, #328]	; (8000540 <display7SEG+0x2d8>)
 80003f8:	f001 f9fa 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	484f      	ldr	r0, [pc, #316]	; (8000540 <display7SEG+0x2d8>)
 8000402:	f001 f9f5 	bl	80017f0 <HAL_GPIO_WritePin>
	}
	if (num == 6) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b06      	cmp	r3, #6
 800040a:	d122      	bne.n	8000452 <display7SEG+0x1ea>
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2101      	movs	r1, #1
 8000410:	484b      	ldr	r0, [pc, #300]	; (8000540 <display7SEG+0x2d8>)
 8000412:	f001 f9ed 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_SET);
 8000416:	2201      	movs	r2, #1
 8000418:	2102      	movs	r1, #2
 800041a:	4849      	ldr	r0, [pc, #292]	; (8000540 <display7SEG+0x2d8>)
 800041c:	f001 f9e8 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2104      	movs	r1, #4
 8000424:	4846      	ldr	r0, [pc, #280]	; (8000540 <display7SEG+0x2d8>)
 8000426:	f001 f9e3 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2108      	movs	r1, #8
 800042e:	4844      	ldr	r0, [pc, #272]	; (8000540 <display7SEG+0x2d8>)
 8000430:	f001 f9de 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2110      	movs	r1, #16
 8000438:	4841      	ldr	r0, [pc, #260]	; (8000540 <display7SEG+0x2d8>)
 800043a:	f001 f9d9 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2120      	movs	r1, #32
 8000442:	483f      	ldr	r0, [pc, #252]	; (8000540 <display7SEG+0x2d8>)
 8000444:	f001 f9d4 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	483c      	ldr	r0, [pc, #240]	; (8000540 <display7SEG+0x2d8>)
 800044e:	f001 f9cf 	bl	80017f0 <HAL_GPIO_WritePin>

	}
	if (num == 7) {
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b07      	cmp	r3, #7
 8000456:	d122      	bne.n	800049e <display7SEG+0x236>
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2101      	movs	r1, #1
 800045c:	4838      	ldr	r0, [pc, #224]	; (8000540 <display7SEG+0x2d8>)
 800045e:	f001 f9c7 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2102      	movs	r1, #2
 8000466:	4836      	ldr	r0, [pc, #216]	; (8000540 <display7SEG+0x2d8>)
 8000468:	f001 f9c2 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2104      	movs	r1, #4
 8000470:	4833      	ldr	r0, [pc, #204]	; (8000540 <display7SEG+0x2d8>)
 8000472:	f001 f9bd 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2108      	movs	r1, #8
 800047a:	4831      	ldr	r0, [pc, #196]	; (8000540 <display7SEG+0x2d8>)
 800047c:	f001 f9b8 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2110      	movs	r1, #16
 8000484:	482e      	ldr	r0, [pc, #184]	; (8000540 <display7SEG+0x2d8>)
 8000486:	f001 f9b3 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2120      	movs	r1, #32
 800048e:	482c      	ldr	r0, [pc, #176]	; (8000540 <display7SEG+0x2d8>)
 8000490:	f001 f9ae 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	4829      	ldr	r0, [pc, #164]	; (8000540 <display7SEG+0x2d8>)
 800049a:	f001 f9a9 	bl	80017f0 <HAL_GPIO_WritePin>
	}
	if (num == 8) {
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b08      	cmp	r3, #8
 80004a2:	d122      	bne.n	80004ea <display7SEG+0x282>
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2101      	movs	r1, #1
 80004a8:	4825      	ldr	r0, [pc, #148]	; (8000540 <display7SEG+0x2d8>)
 80004aa:	f001 f9a1 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2102      	movs	r1, #2
 80004b2:	4823      	ldr	r0, [pc, #140]	; (8000540 <display7SEG+0x2d8>)
 80004b4:	f001 f99c 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2104      	movs	r1, #4
 80004bc:	4820      	ldr	r0, [pc, #128]	; (8000540 <display7SEG+0x2d8>)
 80004be:	f001 f997 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2108      	movs	r1, #8
 80004c6:	481e      	ldr	r0, [pc, #120]	; (8000540 <display7SEG+0x2d8>)
 80004c8:	f001 f992 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2110      	movs	r1, #16
 80004d0:	481b      	ldr	r0, [pc, #108]	; (8000540 <display7SEG+0x2d8>)
 80004d2:	f001 f98d 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2120      	movs	r1, #32
 80004da:	4819      	ldr	r0, [pc, #100]	; (8000540 <display7SEG+0x2d8>)
 80004dc:	f001 f988 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	4816      	ldr	r0, [pc, #88]	; (8000540 <display7SEG+0x2d8>)
 80004e6:	f001 f983 	bl	80017f0 <HAL_GPIO_WritePin>
	}
	if (num == 9) {
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2b09      	cmp	r3, #9
 80004ee:	d122      	bne.n	8000536 <display7SEG+0x2ce>
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2101      	movs	r1, #1
 80004f4:	4812      	ldr	r0, [pc, #72]	; (8000540 <display7SEG+0x2d8>)
 80004f6:	f001 f97b 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2102      	movs	r1, #2
 80004fe:	4810      	ldr	r0, [pc, #64]	; (8000540 <display7SEG+0x2d8>)
 8000500:	f001 f976 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2104      	movs	r1, #4
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <display7SEG+0x2d8>)
 800050a:	f001 f971 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <display7SEG+0x2d8>)
 8000514:	f001 f96c 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2110      	movs	r1, #16
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <display7SEG+0x2d8>)
 800051e:	f001 f967 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2120      	movs	r1, #32
 8000526:	4806      	ldr	r0, [pc, #24]	; (8000540 <display7SEG+0x2d8>)
 8000528:	f001 f962 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <display7SEG+0x2d8>)
 8000532:	f001 f95d 	bl	80017f0 <HAL_GPIO_WritePin>
	}
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010c00 	.word	0x40010c00

08000544 <update7SEG>:

void update7SEG(int index) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d87a      	bhi.n	8000648 <update7SEG+0x104>
 8000552:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <update7SEG+0x14>)
 8000554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000558:	08000569 	.word	0x08000569
 800055c:	080005a1 	.word	0x080005a1
 8000560:	080005d9 	.word	0x080005d9
 8000564:	08000611 	.word	0x08000611
	switch (index) {
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	4839      	ldr	r0, [pc, #228]	; (8000654 <update7SEG+0x110>)
 800056e:	f001 f93f 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	4837      	ldr	r0, [pc, #220]	; (8000654 <update7SEG+0x110>)
 8000578:	f001 f93a 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA8_GPIO_Port, PA8_Pin, SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4834      	ldr	r0, [pc, #208]	; (8000654 <update7SEG+0x110>)
 8000584:	f001 f934 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA9_GPIO_Port, PA9_Pin, SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058e:	4831      	ldr	r0, [pc, #196]	; (8000654 <update7SEG+0x110>)
 8000590:	f001 f92e 	bl	80017f0 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000594:	4b30      	ldr	r3, [pc, #192]	; (8000658 <update7SEG+0x114>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fe65 	bl	8000268 <display7SEG>
		break;
 800059e:	e054      	b.n	800064a <update7SEG+0x106>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	482b      	ldr	r0, [pc, #172]	; (8000654 <update7SEG+0x110>)
 80005a6:	f001 f923 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	4829      	ldr	r0, [pc, #164]	; (8000654 <update7SEG+0x110>)
 80005b0:	f001 f91e 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA8_GPIO_Port, PA8_Pin, SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ba:	4826      	ldr	r0, [pc, #152]	; (8000654 <update7SEG+0x110>)
 80005bc:	f001 f918 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA9_GPIO_Port, PA9_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c6:	4823      	ldr	r0, [pc, #140]	; (8000654 <update7SEG+0x110>)
 80005c8:	f001 f912 	bl	80017f0 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <update7SEG+0x114>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe49 	bl	8000268 <display7SEG>
		break;
 80005d6:	e038      	b.n	800064a <update7SEG+0x106>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(PA8_GPIO_Port, PA8_Pin, RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005de:	481d      	ldr	r0, [pc, #116]	; (8000654 <update7SEG+0x110>)
 80005e0:	f001 f906 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	481a      	ldr	r0, [pc, #104]	; (8000654 <update7SEG+0x110>)
 80005ea:	f001 f901 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	4818      	ldr	r0, [pc, #96]	; (8000654 <update7SEG+0x110>)
 80005f4:	f001 f8fc 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA9_GPIO_Port, PA9_Pin, SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fe:	4815      	ldr	r0, [pc, #84]	; (8000654 <update7SEG+0x110>)
 8000600:	f001 f8f6 	bl	80017f0 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <update7SEG+0x114>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fe2d 	bl	8000268 <display7SEG>
		break;
 800060e:	e01c      	b.n	800064a <update7SEG+0x106>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(PA9_GPIO_Port, PA9_Pin, RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <update7SEG+0x110>)
 8000618:	f001 f8ea 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <update7SEG+0x110>)
 8000622:	f001 f8e5 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <update7SEG+0x110>)
 800062c:	f001 f8e0 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA8_GPIO_Port, PA8_Pin, SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <update7SEG+0x110>)
 8000638:	f001 f8da 	bl	80017f0 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <update7SEG+0x114>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe11 	bl	8000268 <display7SEG>
		break;
 8000646:	e000      	b.n	800064a <update7SEG+0x106>
	default:
		break;
 8000648:	bf00      	nop
	}
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010800 	.word	0x40010800
 8000658:	20000000 	.word	0x20000000

0800065c <displayMatrix>:
#include "main.h"

int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};

void displayMatrix(int row, int col) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]

    if (row == 0) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d15d      	bne.n	8000728 <displayMatrix+0xcc>
        HAL_GPIO_WritePin(PB8_GPIO_Port, PB8_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	48d6      	ldr	r0, [pc, #856]	; (80009cc <displayMatrix+0x370>)
 8000674:	f001 f8bc 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB9_GPIO_Port, PB9_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067e:	48d3      	ldr	r0, [pc, #844]	; (80009cc <displayMatrix+0x370>)
 8000680:	f001 f8b6 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB10_GPIO_Port, PB10_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068a:	48d0      	ldr	r0, [pc, #832]	; (80009cc <displayMatrix+0x370>)
 800068c:	f001 f8b0 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB11_GPIO_Port, PB11_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000696:	48cd      	ldr	r0, [pc, #820]	; (80009cc <displayMatrix+0x370>)
 8000698:	f001 f8aa 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB12_GPIO_Port, PB12_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a2:	48ca      	ldr	r0, [pc, #808]	; (80009cc <displayMatrix+0x370>)
 80006a4:	f001 f8a4 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB13_GPIO_Port, PB13_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	48c7      	ldr	r0, [pc, #796]	; (80009cc <displayMatrix+0x370>)
 80006b0:	f001 f89e 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB14_GPIO_Port, PB14_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ba:	48c4      	ldr	r0, [pc, #784]	; (80009cc <displayMatrix+0x370>)
 80006bc:	f001 f898 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB15_GPIO_Port, PB15_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c6:	48c1      	ldr	r0, [pc, #772]	; (80009cc <displayMatrix+0x370>)
 80006c8:	f001 f892 	bl	80017f0 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2104      	movs	r1, #4
 80006d0:	48bf      	ldr	r0, [pc, #764]	; (80009d0 <displayMatrix+0x374>)
 80006d2:	f001 f88d 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2108      	movs	r1, #8
 80006da:	48bd      	ldr	r0, [pc, #756]	; (80009d0 <displayMatrix+0x374>)
 80006dc:	f001 f888 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA10_GPIO_Port, PA10_Pin, RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	48ba      	ldr	r0, [pc, #744]	; (80009d0 <displayMatrix+0x374>)
 80006e8:	f001 f882 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA11_GPIO_Port, PA11_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f2:	48b7      	ldr	r0, [pc, #732]	; (80009d0 <displayMatrix+0x374>)
 80006f4:	f001 f87c 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA12_GPIO_Port, PA12_Pin, RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fe:	48b4      	ldr	r0, [pc, #720]	; (80009d0 <displayMatrix+0x374>)
 8000700:	f001 f876 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA13_GPIO_Port, PA13_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070a:	48b1      	ldr	r0, [pc, #708]	; (80009d0 <displayMatrix+0x374>)
 800070c:	f001 f870 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA14_GPIO_Port, PA14_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000716:	48ae      	ldr	r0, [pc, #696]	; (80009d0 <displayMatrix+0x374>)
 8000718:	f001 f86a 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA15_GPIO_Port, PA15_Pin, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000722:	48ab      	ldr	r0, [pc, #684]	; (80009d0 <displayMatrix+0x374>)
 8000724:	f001 f864 	bl	80017f0 <HAL_GPIO_WritePin>
    }

    if (row == 1) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d15d      	bne.n	80007ea <displayMatrix+0x18e>
        HAL_GPIO_WritePin(PB8_GPIO_Port, PB8_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	48a5      	ldr	r0, [pc, #660]	; (80009cc <displayMatrix+0x370>)
 8000736:	f001 f85b 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB9_GPIO_Port, PB9_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000740:	48a2      	ldr	r0, [pc, #648]	; (80009cc <displayMatrix+0x370>)
 8000742:	f001 f855 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB10_GPIO_Port, PB10_Pin, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074c:	489f      	ldr	r0, [pc, #636]	; (80009cc <displayMatrix+0x370>)
 800074e:	f001 f84f 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB11_GPIO_Port, PB11_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000758:	489c      	ldr	r0, [pc, #624]	; (80009cc <displayMatrix+0x370>)
 800075a:	f001 f849 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB12_GPIO_Port, PB12_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000764:	4899      	ldr	r0, [pc, #612]	; (80009cc <displayMatrix+0x370>)
 8000766:	f001 f843 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB13_GPIO_Port, PB13_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	4896      	ldr	r0, [pc, #600]	; (80009cc <displayMatrix+0x370>)
 8000772:	f001 f83d 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB14_GPIO_Port, PB14_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077c:	4893      	ldr	r0, [pc, #588]	; (80009cc <displayMatrix+0x370>)
 800077e:	f001 f837 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB15_GPIO_Port, PB15_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000788:	4890      	ldr	r0, [pc, #576]	; (80009cc <displayMatrix+0x370>)
 800078a:	f001 f831 	bl	80017f0 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2104      	movs	r1, #4
 8000792:	488f      	ldr	r0, [pc, #572]	; (80009d0 <displayMatrix+0x374>)
 8000794:	f001 f82c 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2108      	movs	r1, #8
 800079c:	488c      	ldr	r0, [pc, #560]	; (80009d0 <displayMatrix+0x374>)
 800079e:	f001 f827 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA10_GPIO_Port, PA10_Pin, RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a8:	4889      	ldr	r0, [pc, #548]	; (80009d0 <displayMatrix+0x374>)
 80007aa:	f001 f821 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA11_GPIO_Port, PA11_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	4886      	ldr	r0, [pc, #536]	; (80009d0 <displayMatrix+0x374>)
 80007b6:	f001 f81b 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA12_GPIO_Port, PA12_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c0:	4883      	ldr	r0, [pc, #524]	; (80009d0 <displayMatrix+0x374>)
 80007c2:	f001 f815 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA13_GPIO_Port, PA13_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007cc:	4880      	ldr	r0, [pc, #512]	; (80009d0 <displayMatrix+0x374>)
 80007ce:	f001 f80f 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA14_GPIO_Port, PA14_Pin, RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d8:	487d      	ldr	r0, [pc, #500]	; (80009d0 <displayMatrix+0x374>)
 80007da:	f001 f809 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA15_GPIO_Port, PA15_Pin, SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e4:	487a      	ldr	r0, [pc, #488]	; (80009d0 <displayMatrix+0x374>)
 80007e6:	f001 f803 	bl	80017f0 <HAL_GPIO_WritePin>
    }

    if (row == 2) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d15d      	bne.n	80008ac <displayMatrix+0x250>
        HAL_GPIO_WritePin(PB8_GPIO_Port, PB8_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f6:	4875      	ldr	r0, [pc, #468]	; (80009cc <displayMatrix+0x370>)
 80007f8:	f000 fffa 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB9_GPIO_Port, PB9_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000802:	4872      	ldr	r0, [pc, #456]	; (80009cc <displayMatrix+0x370>)
 8000804:	f000 fff4 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB10_GPIO_Port, PB10_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	486f      	ldr	r0, [pc, #444]	; (80009cc <displayMatrix+0x370>)
 8000810:	f000 ffee 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB11_GPIO_Port, PB11_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081a:	486c      	ldr	r0, [pc, #432]	; (80009cc <displayMatrix+0x370>)
 800081c:	f000 ffe8 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB12_GPIO_Port, PB12_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000826:	4869      	ldr	r0, [pc, #420]	; (80009cc <displayMatrix+0x370>)
 8000828:	f000 ffe2 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB13_GPIO_Port, PB13_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000832:	4866      	ldr	r0, [pc, #408]	; (80009cc <displayMatrix+0x370>)
 8000834:	f000 ffdc 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB14_GPIO_Port, PB14_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	4863      	ldr	r0, [pc, #396]	; (80009cc <displayMatrix+0x370>)
 8000840:	f000 ffd6 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB15_GPIO_Port, PB15_Pin, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	4860      	ldr	r0, [pc, #384]	; (80009cc <displayMatrix+0x370>)
 800084c:	f000 ffd0 	bl	80017f0 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2104      	movs	r1, #4
 8000854:	485e      	ldr	r0, [pc, #376]	; (80009d0 <displayMatrix+0x374>)
 8000856:	f000 ffcb 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	485c      	ldr	r0, [pc, #368]	; (80009d0 <displayMatrix+0x374>)
 8000860:	f000 ffc6 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA10_GPIO_Port, PA10_Pin, SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086a:	4859      	ldr	r0, [pc, #356]	; (80009d0 <displayMatrix+0x374>)
 800086c:	f000 ffc0 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA11_GPIO_Port, PA11_Pin, SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000876:	4856      	ldr	r0, [pc, #344]	; (80009d0 <displayMatrix+0x374>)
 8000878:	f000 ffba 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA12_GPIO_Port, PA12_Pin, SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000882:	4853      	ldr	r0, [pc, #332]	; (80009d0 <displayMatrix+0x374>)
 8000884:	f000 ffb4 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA13_GPIO_Port, PA13_Pin, SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088e:	4850      	ldr	r0, [pc, #320]	; (80009d0 <displayMatrix+0x374>)
 8000890:	f000 ffae 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA14_GPIO_Port, PA14_Pin, RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089a:	484d      	ldr	r0, [pc, #308]	; (80009d0 <displayMatrix+0x374>)
 800089c:	f000 ffa8 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA15_GPIO_Port, PA15_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a6:	484a      	ldr	r0, [pc, #296]	; (80009d0 <displayMatrix+0x374>)
 80008a8:	f000 ffa2 	bl	80017f0 <HAL_GPIO_WritePin>
    }
    if (row == 3) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d15d      	bne.n	800096e <displayMatrix+0x312>
        HAL_GPIO_WritePin(PB8_GPIO_Port, PB8_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b8:	4844      	ldr	r0, [pc, #272]	; (80009cc <displayMatrix+0x370>)
 80008ba:	f000 ff99 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB9_GPIO_Port, PB9_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c4:	4841      	ldr	r0, [pc, #260]	; (80009cc <displayMatrix+0x370>)
 80008c6:	f000 ff93 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB10_GPIO_Port, PB10_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d0:	483e      	ldr	r0, [pc, #248]	; (80009cc <displayMatrix+0x370>)
 80008d2:	f000 ff8d 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB11_GPIO_Port, PB11_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008dc:	483b      	ldr	r0, [pc, #236]	; (80009cc <displayMatrix+0x370>)
 80008de:	f000 ff87 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB12_GPIO_Port, PB12_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e8:	4838      	ldr	r0, [pc, #224]	; (80009cc <displayMatrix+0x370>)
 80008ea:	f000 ff81 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB13_GPIO_Port, PB13_Pin, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f4:	4835      	ldr	r0, [pc, #212]	; (80009cc <displayMatrix+0x370>)
 80008f6:	f000 ff7b 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB14_GPIO_Port, PB14_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000900:	4832      	ldr	r0, [pc, #200]	; (80009cc <displayMatrix+0x370>)
 8000902:	f000 ff75 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB15_GPIO_Port, PB15_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800090c:	482f      	ldr	r0, [pc, #188]	; (80009cc <displayMatrix+0x370>)
 800090e:	f000 ff6f 	bl	80017f0 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2104      	movs	r1, #4
 8000916:	482e      	ldr	r0, [pc, #184]	; (80009d0 <displayMatrix+0x374>)
 8000918:	f000 ff6a 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2108      	movs	r1, #8
 8000920:	482b      	ldr	r0, [pc, #172]	; (80009d0 <displayMatrix+0x374>)
 8000922:	f000 ff65 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA10_GPIO_Port, PA10_Pin, SET);
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092c:	4828      	ldr	r0, [pc, #160]	; (80009d0 <displayMatrix+0x374>)
 800092e:	f000 ff5f 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA11_GPIO_Port, PA11_Pin, SET);
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000938:	4825      	ldr	r0, [pc, #148]	; (80009d0 <displayMatrix+0x374>)
 800093a:	f000 ff59 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA12_GPIO_Port, PA12_Pin, SET);
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000944:	4822      	ldr	r0, [pc, #136]	; (80009d0 <displayMatrix+0x374>)
 8000946:	f000 ff53 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA13_GPIO_Port, PA13_Pin, SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000950:	481f      	ldr	r0, [pc, #124]	; (80009d0 <displayMatrix+0x374>)
 8000952:	f000 ff4d 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA14_GPIO_Port, PA14_Pin, RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800095c:	481c      	ldr	r0, [pc, #112]	; (80009d0 <displayMatrix+0x374>)
 800095e:	f000 ff47 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA15_GPIO_Port, PA15_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000968:	4819      	ldr	r0, [pc, #100]	; (80009d0 <displayMatrix+0x374>)
 800096a:	f000 ff41 	bl	80017f0 <HAL_GPIO_WritePin>
    }
    if (row == 4) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b04      	cmp	r3, #4
 8000972:	d162      	bne.n	8000a3a <displayMatrix+0x3de>
        HAL_GPIO_WritePin(PB8_GPIO_Port, PB8_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <displayMatrix+0x370>)
 800097c:	f000 ff38 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB9_GPIO_Port, PB9_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <displayMatrix+0x370>)
 8000988:	f000 ff32 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB10_GPIO_Port, PB10_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000992:	480e      	ldr	r0, [pc, #56]	; (80009cc <displayMatrix+0x370>)
 8000994:	f000 ff2c 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB11_GPIO_Port, PB11_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <displayMatrix+0x370>)
 80009a0:	f000 ff26 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB12_GPIO_Port, PB12_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009aa:	4808      	ldr	r0, [pc, #32]	; (80009cc <displayMatrix+0x370>)
 80009ac:	f000 ff20 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB13_GPIO_Port, PB13_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <displayMatrix+0x370>)
 80009b8:	f000 ff1a 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB14_GPIO_Port, PB14_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c2:	4802      	ldr	r0, [pc, #8]	; (80009cc <displayMatrix+0x370>)
 80009c4:	f000 ff14 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB15_GPIO_Port, PB15_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	e003      	b.n	80009d4 <displayMatrix+0x378>
 80009cc:	40010c00 	.word	0x40010c00
 80009d0:	40010800 	.word	0x40010800
 80009d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d8:	48ab      	ldr	r0, [pc, #684]	; (8000c88 <displayMatrix+0x62c>)
 80009da:	f000 ff09 	bl	80017f0 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2104      	movs	r1, #4
 80009e2:	48aa      	ldr	r0, [pc, #680]	; (8000c8c <displayMatrix+0x630>)
 80009e4:	f000 ff04 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2108      	movs	r1, #8
 80009ec:	48a7      	ldr	r0, [pc, #668]	; (8000c8c <displayMatrix+0x630>)
 80009ee:	f000 feff 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA10_GPIO_Port, PA10_Pin, RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	48a4      	ldr	r0, [pc, #656]	; (8000c8c <displayMatrix+0x630>)
 80009fa:	f000 fef9 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA11_GPIO_Port, PA11_Pin, RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a04:	48a1      	ldr	r0, [pc, #644]	; (8000c8c <displayMatrix+0x630>)
 8000a06:	f000 fef3 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA12_GPIO_Port, PA12_Pin, RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a10:	489e      	ldr	r0, [pc, #632]	; (8000c8c <displayMatrix+0x630>)
 8000a12:	f000 feed 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA13_GPIO_Port, PA13_Pin, RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1c:	489b      	ldr	r0, [pc, #620]	; (8000c8c <displayMatrix+0x630>)
 8000a1e:	f000 fee7 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA14_GPIO_Port, PA14_Pin, RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a28:	4898      	ldr	r0, [pc, #608]	; (8000c8c <displayMatrix+0x630>)
 8000a2a:	f000 fee1 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA15_GPIO_Port, PA15_Pin, RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a34:	4895      	ldr	r0, [pc, #596]	; (8000c8c <displayMatrix+0x630>)
 8000a36:	f000 fedb 	bl	80017f0 <HAL_GPIO_WritePin>
    }
    if (row == 5) {
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b05      	cmp	r3, #5
 8000a3e:	d15d      	bne.n	8000afc <displayMatrix+0x4a0>
        HAL_GPIO_WritePin(PB8_GPIO_Port, PB8_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	4890      	ldr	r0, [pc, #576]	; (8000c88 <displayMatrix+0x62c>)
 8000a48:	f000 fed2 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB9_GPIO_Port, PB9_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a52:	488d      	ldr	r0, [pc, #564]	; (8000c88 <displayMatrix+0x62c>)
 8000a54:	f000 fecc 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB10_GPIO_Port, PB10_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	488a      	ldr	r0, [pc, #552]	; (8000c88 <displayMatrix+0x62c>)
 8000a60:	f000 fec6 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB11_GPIO_Port, PB11_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6a:	4887      	ldr	r0, [pc, #540]	; (8000c88 <displayMatrix+0x62c>)
 8000a6c:	f000 fec0 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB12_GPIO_Port, PB12_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a76:	4884      	ldr	r0, [pc, #528]	; (8000c88 <displayMatrix+0x62c>)
 8000a78:	f000 feba 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB13_GPIO_Port, PB13_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a82:	4881      	ldr	r0, [pc, #516]	; (8000c88 <displayMatrix+0x62c>)
 8000a84:	f000 feb4 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB14_GPIO_Port, PB14_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8e:	487e      	ldr	r0, [pc, #504]	; (8000c88 <displayMatrix+0x62c>)
 8000a90:	f000 feae 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB15_GPIO_Port, PB15_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a9a:	487b      	ldr	r0, [pc, #492]	; (8000c88 <displayMatrix+0x62c>)
 8000a9c:	f000 fea8 	bl	80017f0 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4879      	ldr	r0, [pc, #484]	; (8000c8c <displayMatrix+0x630>)
 8000aa6:	f000 fea3 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	4877      	ldr	r0, [pc, #476]	; (8000c8c <displayMatrix+0x630>)
 8000ab0:	f000 fe9e 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA10_GPIO_Port, PA10_Pin, RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aba:	4874      	ldr	r0, [pc, #464]	; (8000c8c <displayMatrix+0x630>)
 8000abc:	f000 fe98 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA11_GPIO_Port, PA11_Pin, RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac6:	4871      	ldr	r0, [pc, #452]	; (8000c8c <displayMatrix+0x630>)
 8000ac8:	f000 fe92 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA12_GPIO_Port, PA12_Pin, RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad2:	486e      	ldr	r0, [pc, #440]	; (8000c8c <displayMatrix+0x630>)
 8000ad4:	f000 fe8c 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA13_GPIO_Port, PA13_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ade:	486b      	ldr	r0, [pc, #428]	; (8000c8c <displayMatrix+0x630>)
 8000ae0:	f000 fe86 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA14_GPIO_Port, PA14_Pin, RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aea:	4868      	ldr	r0, [pc, #416]	; (8000c8c <displayMatrix+0x630>)
 8000aec:	f000 fe80 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA15_GPIO_Port, PA15_Pin, RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af6:	4865      	ldr	r0, [pc, #404]	; (8000c8c <displayMatrix+0x630>)
 8000af8:	f000 fe7a 	bl	80017f0 <HAL_GPIO_WritePin>
    }
    if (row == 6) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d15d      	bne.n	8000bbe <displayMatrix+0x562>
        HAL_GPIO_WritePin(PB8_GPIO_Port, PB8_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b08:	485f      	ldr	r0, [pc, #380]	; (8000c88 <displayMatrix+0x62c>)
 8000b0a:	f000 fe71 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB9_GPIO_Port, PB9_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b14:	485c      	ldr	r0, [pc, #368]	; (8000c88 <displayMatrix+0x62c>)
 8000b16:	f000 fe6b 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB10_GPIO_Port, PB10_Pin, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b20:	4859      	ldr	r0, [pc, #356]	; (8000c88 <displayMatrix+0x62c>)
 8000b22:	f000 fe65 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB11_GPIO_Port, PB11_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2c:	4856      	ldr	r0, [pc, #344]	; (8000c88 <displayMatrix+0x62c>)
 8000b2e:	f000 fe5f 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB12_GPIO_Port, PB12_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b38:	4853      	ldr	r0, [pc, #332]	; (8000c88 <displayMatrix+0x62c>)
 8000b3a:	f000 fe59 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB13_GPIO_Port, PB13_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b44:	4850      	ldr	r0, [pc, #320]	; (8000c88 <displayMatrix+0x62c>)
 8000b46:	f000 fe53 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB14_GPIO_Port, PB14_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b50:	484d      	ldr	r0, [pc, #308]	; (8000c88 <displayMatrix+0x62c>)
 8000b52:	f000 fe4d 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB15_GPIO_Port, PB15_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5c:	484a      	ldr	r0, [pc, #296]	; (8000c88 <displayMatrix+0x62c>)
 8000b5e:	f000 fe47 	bl	80017f0 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2104      	movs	r1, #4
 8000b66:	4849      	ldr	r0, [pc, #292]	; (8000c8c <displayMatrix+0x630>)
 8000b68:	f000 fe42 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2108      	movs	r1, #8
 8000b70:	4846      	ldr	r0, [pc, #280]	; (8000c8c <displayMatrix+0x630>)
 8000b72:	f000 fe3d 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA10_GPIO_Port, PA10_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7c:	4843      	ldr	r0, [pc, #268]	; (8000c8c <displayMatrix+0x630>)
 8000b7e:	f000 fe37 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA11_GPIO_Port, PA11_Pin, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b88:	4840      	ldr	r0, [pc, #256]	; (8000c8c <displayMatrix+0x630>)
 8000b8a:	f000 fe31 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA12_GPIO_Port, PA12_Pin, SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b94:	483d      	ldr	r0, [pc, #244]	; (8000c8c <displayMatrix+0x630>)
 8000b96:	f000 fe2b 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA13_GPIO_Port, PA13_Pin, SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba0:	483a      	ldr	r0, [pc, #232]	; (8000c8c <displayMatrix+0x630>)
 8000ba2:	f000 fe25 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA14_GPIO_Port, PA14_Pin, RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bac:	4837      	ldr	r0, [pc, #220]	; (8000c8c <displayMatrix+0x630>)
 8000bae:	f000 fe1f 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA15_GPIO_Port, PA15_Pin, RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb8:	4834      	ldr	r0, [pc, #208]	; (8000c8c <displayMatrix+0x630>)
 8000bba:	f000 fe19 	bl	80017f0 <HAL_GPIO_WritePin>
    }
    if (row == 7) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	d15d      	bne.n	8000c80 <displayMatrix+0x624>
        HAL_GPIO_WritePin(PB8_GPIO_Port, PB8_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bca:	482f      	ldr	r0, [pc, #188]	; (8000c88 <displayMatrix+0x62c>)
 8000bcc:	f000 fe10 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB9_GPIO_Port, PB9_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd6:	482c      	ldr	r0, [pc, #176]	; (8000c88 <displayMatrix+0x62c>)
 8000bd8:	f000 fe0a 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB10_GPIO_Port, PB10_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be2:	4829      	ldr	r0, [pc, #164]	; (8000c88 <displayMatrix+0x62c>)
 8000be4:	f000 fe04 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB11_GPIO_Port, PB11_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bee:	4826      	ldr	r0, [pc, #152]	; (8000c88 <displayMatrix+0x62c>)
 8000bf0:	f000 fdfe 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB12_GPIO_Port, PB12_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfa:	4823      	ldr	r0, [pc, #140]	; (8000c88 <displayMatrix+0x62c>)
 8000bfc:	f000 fdf8 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB13_GPIO_Port, PB13_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c06:	4820      	ldr	r0, [pc, #128]	; (8000c88 <displayMatrix+0x62c>)
 8000c08:	f000 fdf2 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB14_GPIO_Port, PB14_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c12:	481d      	ldr	r0, [pc, #116]	; (8000c88 <displayMatrix+0x62c>)
 8000c14:	f000 fdec 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB15_GPIO_Port, PB15_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1e:	481a      	ldr	r0, [pc, #104]	; (8000c88 <displayMatrix+0x62c>)
 8000c20:	f000 fde6 	bl	80017f0 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2104      	movs	r1, #4
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <displayMatrix+0x630>)
 8000c2a:	f000 fde1 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2108      	movs	r1, #8
 8000c32:	4816      	ldr	r0, [pc, #88]	; (8000c8c <displayMatrix+0x630>)
 8000c34:	f000 fddc 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA10_GPIO_Port, PA10_Pin, SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3e:	4813      	ldr	r0, [pc, #76]	; (8000c8c <displayMatrix+0x630>)
 8000c40:	f000 fdd6 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA11_GPIO_Port, PA11_Pin, SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c4a:	4810      	ldr	r0, [pc, #64]	; (8000c8c <displayMatrix+0x630>)
 8000c4c:	f000 fdd0 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA12_GPIO_Port, PA12_Pin, SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <displayMatrix+0x630>)
 8000c58:	f000 fdca 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA13_GPIO_Port, PA13_Pin, SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <displayMatrix+0x630>)
 8000c64:	f000 fdc4 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA14_GPIO_Port, PA14_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6e:	4807      	ldr	r0, [pc, #28]	; (8000c8c <displayMatrix+0x630>)
 8000c70:	f000 fdbe 	bl	80017f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PA15_GPIO_Port, PA15_Pin, RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <displayMatrix+0x630>)
 8000c7c:	f000 fdb8 	bl	80017f0 <HAL_GPIO_WritePin>
    }
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40010800 	.word	0x40010800

08000c90 <updateLEDMatrix>:

void updateLEDMatrix(int index){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b07      	cmp	r3, #7
 8000c9c:	d84a      	bhi.n	8000d34 <updateLEDMatrix+0xa4>
 8000c9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ca4 <updateLEDMatrix+0x14>)
 8000ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca4:	08000cc5 	.word	0x08000cc5
 8000ca8:	08000cd3 	.word	0x08000cd3
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000cef 	.word	0x08000cef
 8000cb4:	08000cfd 	.word	0x08000cfd
 8000cb8:	08000d0b 	.word	0x08000d0b
 8000cbc:	08000d19 	.word	0x08000d19
 8000cc0:	08000d27 	.word	0x08000d27
	switch(index){
	case 0:// display row 0 of led matrix
		displayMatrix(0, matrix_buffer[0]);
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <updateLEDMatrix+0xb0>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fcc6 	bl	800065c <displayMatrix>
		break;
 8000cd0:	e031      	b.n	8000d36 <updateLEDMatrix+0xa6>
	case 1:// display row 1 of led matrix
		displayMatrix(1, matrix_buffer[1]);
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <updateLEDMatrix+0xb0>)
 8000cd4:	785b      	ldrb	r3, [r3, #1]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fcbf 	bl	800065c <displayMatrix>
		break;
 8000cde:	e02a      	b.n	8000d36 <updateLEDMatrix+0xa6>
	case 2:// display row 2 of led matrix
		displayMatrix(2, matrix_buffer[2]);
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <updateLEDMatrix+0xb0>)
 8000ce2:	789b      	ldrb	r3, [r3, #2]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f7ff fcb8 	bl	800065c <displayMatrix>
		break;
 8000cec:	e023      	b.n	8000d36 <updateLEDMatrix+0xa6>
	case 3:// display row 3 of led matrix
		displayMatrix(3, matrix_buffer[3]);
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <updateLEDMatrix+0xb0>)
 8000cf0:	78db      	ldrb	r3, [r3, #3]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f7ff fcb1 	bl	800065c <displayMatrix>
		break;
 8000cfa:	e01c      	b.n	8000d36 <updateLEDMatrix+0xa6>
	case 4:// display row 4 of led matrix
		displayMatrix(4, matrix_buffer[4]);
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <updateLEDMatrix+0xb0>)
 8000cfe:	791b      	ldrb	r3, [r3, #4]
 8000d00:	4619      	mov	r1, r3
 8000d02:	2004      	movs	r0, #4
 8000d04:	f7ff fcaa 	bl	800065c <displayMatrix>
		break;
 8000d08:	e015      	b.n	8000d36 <updateLEDMatrix+0xa6>
	case 5:// display row 5 of led matrix
		displayMatrix(5, matrix_buffer[5]);
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <updateLEDMatrix+0xb0>)
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	2005      	movs	r0, #5
 8000d12:	f7ff fca3 	bl	800065c <displayMatrix>
		break;
 8000d16:	e00e      	b.n	8000d36 <updateLEDMatrix+0xa6>
	case 6:// display row 6 of led matrix
		displayMatrix(6, matrix_buffer[6]);
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <updateLEDMatrix+0xb0>)
 8000d1a:	799b      	ldrb	r3, [r3, #6]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2006      	movs	r0, #6
 8000d20:	f7ff fc9c 	bl	800065c <displayMatrix>
		break;
 8000d24:	e007      	b.n	8000d36 <updateLEDMatrix+0xa6>
	case 7:// display row 7 of led matrix
		displayMatrix(7, matrix_buffer[7]);
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <updateLEDMatrix+0xb0>)
 8000d28:	79db      	ldrb	r3, [r3, #7]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2007      	movs	r0, #7
 8000d2e:	f7ff fc95 	bl	800065c <displayMatrix>
		break;
 8000d32:	e000      	b.n	8000d36 <updateLEDMatrix+0xa6>
	default:
		break;
 8000d34:	bf00      	nop
	}
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000010 	.word	0x20000010

08000d44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d48:	f000 fa68 	bl	800121c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d4c:	f000 f874 	bl	8000e38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d50:	f000 f8fa 	bl	8000f48 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000d54:	f000 f8ac 	bl	8000eb0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000d58:	4832      	ldr	r0, [pc, #200]	; (8000e24 <main+0xe0>)
 8000d5a:	f001 f9a7 	bl	80020ac <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	setTimer(0, 1000);
 8000d5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f956 	bl	8001014 <setTimer>
	setTimer(1, 250);
 8000d68:	21fa      	movs	r1, #250	; 0xfa
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 f952 	bl	8001014 <setTimer>
	setTimer(2, 1000);
 8000d70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d74:	2002      	movs	r0, #2
 8000d76:	f000 f94d 	bl	8001014 <setTimer>
	setTimer(3,1000);
 8000d7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f000 f948 	bl	8001014 <setTimer>
	while (1) {
		/* USER CODE END WHILE */
		if (timer_flag[0] == 1) {
 8000d84:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <main+0xe4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10c      	bne.n	8000da6 <main+0x62>
			HAL_GPIO_TogglePin(PA5_GPIO_Port, PA5_Pin);
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4827      	ldr	r0, [pc, #156]	; (8000e2c <main+0xe8>)
 8000d90:	f000 fd46 	bl	8001820 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PA4_GPIO_Port, PA4_Pin);
 8000d94:	2110      	movs	r1, #16
 8000d96:	4825      	ldr	r0, [pc, #148]	; (8000e2c <main+0xe8>)
 8000d98:	f000 fd42 	bl	8001820 <HAL_GPIO_TogglePin>
			setTimer(0, 1000);
 8000d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 f937 	bl	8001014 <setTimer>
		}
		if (timer_flag[1] == 1) {
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <main+0xe4>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d114      	bne.n	8000dd8 <main+0x94>
			updateClockBuffer();
 8000dae:	f7ff f9fd 	bl	80001ac <updateClockBuffer>
			update7SEG(index_led++);
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <main+0xec>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	491d      	ldr	r1, [pc, #116]	; (8000e30 <main+0xec>)
 8000dba:	600a      	str	r2, [r1, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fbc1 	bl	8000544 <update7SEG>
			if (index_led == 4)
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <main+0xec>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d102      	bne.n	8000dd0 <main+0x8c>
				index_led = 0;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <main+0xec>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
			setTimer(1, 250);
 8000dd0:	21fa      	movs	r1, #250	; 0xfa
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 f91e 	bl	8001014 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <main+0xe4>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d108      	bne.n	8000df2 <main+0xae>
			clock();
 8000de0:	f7ff f9b4 	bl	800014c <clock>
			updateClockBuffer();
 8000de4:	f7ff f9e2 	bl	80001ac <updateClockBuffer>
			setTimer(2, 1000);
 8000de8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dec:	2002      	movs	r0, #2
 8000dee:	f000 f911 	bl	8001014 <setTimer>
		}

		if(timer_flag[3] == 1)// control led matrix
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <main+0xe4>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d1c4      	bne.n	8000d84 <main+0x40>
		{
			updateLEDMatrix(index_led_matrix++);
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <main+0xf0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <main+0xf0>)
 8000e02:	600a      	str	r2, [r1, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff43 	bl	8000c90 <updateLEDMatrix>
			if(index_led_matrix == MAX_LED_MATRIX) index_led_matrix = 0;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <main+0xf0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d102      	bne.n	8000e18 <main+0xd4>
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <main+0xf0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
			setTimer(3,100);
 8000e18:	2164      	movs	r1, #100	; 0x64
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f000 f8fa 	bl	8001014 <setTimer>
		if (timer_flag[0] == 1) {
 8000e20:	e7b0      	b.n	8000d84 <main+0x40>
 8000e22:	bf00      	nop
 8000e24:	20000054 	.word	0x20000054
 8000e28:	200000c4 	.word	0x200000c4
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	2000004c 	.word	0x2000004c
 8000e34:	20000050 	.word	0x20000050

08000e38 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */

void SystemClock_Config(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b090      	sub	sp, #64	; 0x40
 8000e3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	2228      	movs	r2, #40	; 0x28
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fce0 	bl	800280c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e62:	2310      	movs	r3, #16
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fcf0 	bl	8001854 <HAL_RCC_OscConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x46>
		Error_Handler();
 8000e7a:	f000 f8c5 	bl	8001008 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e7e:	230f      	movs	r3, #15
 8000e80:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 ff5c 	bl	8001d54 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x6e>
		Error_Handler();
 8000ea2:	f000 f8b1 	bl	8001008 <Error_Handler>
	}
}
 8000ea6:	bf00      	nop
 8000ea8:	3740      	adds	r7, #64	; 0x40
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ed6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000eda:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ee4:	2209      	movs	r2, #9
 8000ee6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000ef6:	f001 f889 	bl	800200c <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000f00:	f000 f882 	bl	8001008 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000f12:	f001 fa07 	bl	8002324 <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000f1c:	f000 f874 	bl	8001008 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_TIM2_Init+0x94>)
 8000f2e:	f001 fbdf 	bl	80026f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000f38:	f000 f866 	bl	8001008 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000054 	.word	0x20000054

08000f48 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <MX_GPIO_Init+0xa0>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MX_GPIO_Init+0xa0>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_GPIO_Init+0xa0>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_GPIO_Init+0xa0>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <MX_GPIO_Init+0xa0>)
 8000f7a:	f043 0308 	orr.w	r3, r3, #8
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_GPIO_Init+0xa0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000f92:	4816      	ldr	r0, [pc, #88]	; (8000fec <MX_GPIO_Init+0xa4>)
 8000f94:	f000 fc2c 	bl	80017f0 <HAL_GPIO_WritePin>
					| PA7_Pin | PA8_Pin | PA9_Pin | PA10_Pin | PA11_Pin
					| PA12_Pin | PA13_Pin | PA14_Pin | PA15_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000f9e:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <MX_GPIO_Init+0xa8>)
 8000fa0:	f000 fc26 	bl	80017f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA2_Pin PA3_Pin PA4_Pin
	 PA5_Pin PA6_Pin PA7_Pin PA8_Pin
	 PA9_Pin PA10_Pin PA11_Pin PA12_Pin
	 PA13_Pin PA14_Pin PA15_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | PA2_Pin | PA3_Pin | PA4_Pin | PA5_Pin
 8000fa4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000fa8:	60bb      	str	r3, [r7, #8]
			| PA6_Pin | PA7_Pin | PA8_Pin | PA9_Pin | PA10_Pin | PA11_Pin
			| PA12_Pin | PA13_Pin | PA14_Pin | PA15_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480b      	ldr	r0, [pc, #44]	; (8000fec <MX_GPIO_Init+0xa4>)
 8000fbe:	f000 fa9d 	bl	80014fc <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0_Pin PB1_Pin PB2_Pin PB10_Pin
	 PB11_Pin PB12_Pin PB13_Pin PB14_Pin
	 PB15_Pin PB3_Pin PB4_Pin PB5_Pin
	 PB6_Pin PB8_Pin PB9_Pin */
	GPIO_InitStruct.Pin = PB0_Pin | PB1_Pin | PB2_Pin | PB10_Pin | PB11_Pin
 8000fc2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000fc6:	60bb      	str	r3, [r7, #8]
			| PB12_Pin | PB13_Pin | PB14_Pin | PB15_Pin | PB3_Pin | PB4_Pin
			| PB5_Pin | PB6_Pin | PB8_Pin | PB9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_GPIO_Init+0xa8>)
 8000fdc:	f000 fa8e 	bl	80014fc <HAL_GPIO_Init>

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	timerun();
 8000ffc:	f000 f82a 	bl	8001054 <timerun>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <setTimer>:


int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    timer_flag[index] = 0;
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <setTimer+0x34>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2100      	movs	r1, #0
 8001024:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    timer_counter[index] = counter / TICK;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <setTimer+0x38>)
 800102c:	fb82 1203 	smull	r1, r2, r2, r3
 8001030:	1092      	asrs	r2, r2, #2
 8001032:	17db      	asrs	r3, r3, #31
 8001034:	1ad2      	subs	r2, r2, r3
 8001036:	4906      	ldr	r1, [pc, #24]	; (8001050 <setTimer+0x3c>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	200000c4 	.word	0x200000c4
 800104c:	66666667 	.word	0x66666667
 8001050:	2000009c 	.word	0x2000009c

08001054 <timerun>:

void timerun() {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {  // Corrected loop condition
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	e01c      	b.n	800109a <timerun+0x46>
        if (timer_counter[i] >= 0) {
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <timerun+0x58>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db13      	blt.n	8001094 <timerun+0x40>
            timer_counter[i]--;
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <timerun+0x58>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	1e5a      	subs	r2, r3, #1
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <timerun+0x58>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (timer_counter[i] <= 0) {
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <timerun+0x58>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	2b00      	cmp	r3, #0
 8001088:	dc04      	bgt.n	8001094 <timerun+0x40>
                timer_flag[i] = 1;
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <timerun+0x5c>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2101      	movs	r1, #1
 8001090:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 10; i++) {  // Corrected loop condition
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b09      	cmp	r3, #9
 800109e:	dddf      	ble.n	8001060 <timerun+0xc>
            }
        }
    }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	2000009c 	.word	0x2000009c
 80010b0:	200000c4 	.word	0x200000c4

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_MspInit+0x5c>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <HAL_MspInit+0x5c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_MspInit+0x5c>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_MspInit+0x5c>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_MspInit+0x5c>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_MspInit+0x60>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_MspInit+0x60>)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001128:	d113      	bne.n	8001152 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_TIM_Base_MspInit+0x44>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_TIM_Base_MspInit+0x44>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_TIM_Base_MspInit+0x44>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201c      	movs	r0, #28
 8001148:	f000 f9a1 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800114c:	201c      	movs	r0, #28
 800114e:	f000 f9ba 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a6:	f000 f87f 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM2_IRQHandler+0x10>)
 80011b6:	f000 ffc5 	bl	8002144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000054 	.word	0x20000054

080011c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d0:	f7ff fff8 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011d6:	490c      	ldr	r1, [pc, #48]	; (8001208 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <LoopFillZerobss+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011ec:	4c09      	ldr	r4, [pc, #36]	; (8001214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fa:	f001 fae3 	bl	80027c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fe:	f7ff fda1 	bl	8000d44 <main>
  bx lr
 8001202:	4770      	bx	lr
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800120c:	08002860 	.word	0x08002860
  ldr r2, =_sbss
 8001210:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001214:	200000f0 	.word	0x200000f0

08001218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x28>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x28>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f923 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	200f      	movs	r0, #15
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff ff3c 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40022000 	.word	0x40022000

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f93b 	bl	80014e2 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f903 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000024 	.word	0x20000024
 80012a0:	2000002c 	.word	0x2000002c
 80012a4:	20000028 	.word	0x20000028

080012a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x1c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x20>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <HAL_IncTick+0x20>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	2000002c 	.word	0x2000002c
 80012c8:	200000ec 	.word	0x200000ec

080012cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GetTick+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	200000ec 	.word	0x200000ec

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4906      	ldr	r1, [pc, #24]	; (8001378 <__NVIC_EnableIRQ+0x34>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff90 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff2d 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff42 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff90 	bl	80013d0 <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5f 	bl	800137c <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff35 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	e148      	b.n	80017a2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001510:	2201      	movs	r2, #1
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8137 	bne.w	800179c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4aa3      	ldr	r2, [pc, #652]	; (80017c0 <HAL_GPIO_Init+0x2c4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d05e      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001538:	4aa1      	ldr	r2, [pc, #644]	; (80017c0 <HAL_GPIO_Init+0x2c4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d875      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800153e:	4aa1      	ldr	r2, [pc, #644]	; (80017c4 <HAL_GPIO_Init+0x2c8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d058      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001544:	4a9f      	ldr	r2, [pc, #636]	; (80017c4 <HAL_GPIO_Init+0x2c8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d86f      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800154a:	4a9f      	ldr	r2, [pc, #636]	; (80017c8 <HAL_GPIO_Init+0x2cc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d052      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001550:	4a9d      	ldr	r2, [pc, #628]	; (80017c8 <HAL_GPIO_Init+0x2cc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d869      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001556:	4a9d      	ldr	r2, [pc, #628]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d04c      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 800155c:	4a9b      	ldr	r2, [pc, #620]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d863      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001562:	4a9b      	ldr	r2, [pc, #620]	; (80017d0 <HAL_GPIO_Init+0x2d4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d046      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001568:	4a99      	ldr	r2, [pc, #612]	; (80017d0 <HAL_GPIO_Init+0x2d4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d85d      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800156e:	2b12      	cmp	r3, #18
 8001570:	d82a      	bhi.n	80015c8 <HAL_GPIO_Init+0xcc>
 8001572:	2b12      	cmp	r3, #18
 8001574:	d859      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <HAL_GPIO_Init+0x80>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	080015f7 	.word	0x080015f7
 8001580:	080015d1 	.word	0x080015d1
 8001584:	080015e3 	.word	0x080015e3
 8001588:	08001625 	.word	0x08001625
 800158c:	0800162b 	.word	0x0800162b
 8001590:	0800162b 	.word	0x0800162b
 8001594:	0800162b 	.word	0x0800162b
 8001598:	0800162b 	.word	0x0800162b
 800159c:	0800162b 	.word	0x0800162b
 80015a0:	0800162b 	.word	0x0800162b
 80015a4:	0800162b 	.word	0x0800162b
 80015a8:	0800162b 	.word	0x0800162b
 80015ac:	0800162b 	.word	0x0800162b
 80015b0:	0800162b 	.word	0x0800162b
 80015b4:	0800162b 	.word	0x0800162b
 80015b8:	0800162b 	.word	0x0800162b
 80015bc:	0800162b 	.word	0x0800162b
 80015c0:	080015d9 	.word	0x080015d9
 80015c4:	080015ed 	.word	0x080015ed
 80015c8:	4a82      	ldr	r2, [pc, #520]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ce:	e02c      	b.n	800162a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e029      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	3304      	adds	r3, #4
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e024      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	3308      	adds	r3, #8
 80015e8:	623b      	str	r3, [r7, #32]
          break;
 80015ea:	e01f      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	330c      	adds	r3, #12
 80015f2:	623b      	str	r3, [r7, #32]
          break;
 80015f4:	e01a      	b.n	800162c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015fe:	2304      	movs	r3, #4
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e013      	b.n	800162c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	611a      	str	r2, [r3, #16]
          break;
 8001616:	e009      	b.n	800162c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	615a      	str	r2, [r3, #20]
          break;
 8001622:	e003      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x130>
          break;
 800162a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	d801      	bhi.n	8001636 <HAL_GPIO_Init+0x13a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	e001      	b.n	800163a <HAL_GPIO_Init+0x13e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d802      	bhi.n	8001648 <HAL_GPIO_Init+0x14c>
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0x152>
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	3b08      	subs	r3, #8
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	210f      	movs	r1, #15
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	6a39      	ldr	r1, [r7, #32]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8090 	beq.w	800179c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800167c:	4b56      	ldr	r3, [pc, #344]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a55      	ldr	r2, [pc, #340]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x2e0>)
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a49      	ldr	r2, [pc, #292]	; (80017e0 <HAL_GPIO_Init+0x2e4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00d      	beq.n	80016dc <HAL_GPIO_Init+0x1e0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d007      	beq.n	80016d8 <HAL_GPIO_Init+0x1dc>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d101      	bne.n	80016d4 <HAL_GPIO_Init+0x1d8>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e004      	b.n	80016de <HAL_GPIO_Init+0x1e2>
 80016d4:	2303      	movs	r3, #3
 80016d6:	e002      	b.n	80016de <HAL_GPIO_Init+0x1e2>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_GPIO_Init+0x1e2>
 80016dc:	2300      	movs	r3, #0
 80016de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e0:	f002 0203 	and.w	r2, r2, #3
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	4093      	lsls	r3, r2
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ee:	493b      	ldr	r1, [pc, #236]	; (80017dc <HAL_GPIO_Init+0x2e0>)
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001708:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	4937      	ldr	r1, [pc, #220]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	43db      	mvns	r3, r3
 800171e:	4933      	ldr	r1, [pc, #204]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001720:	4013      	ands	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001730:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	492d      	ldr	r1, [pc, #180]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	60cb      	str	r3, [r1, #12]
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	43db      	mvns	r3, r3
 8001746:	4929      	ldr	r1, [pc, #164]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001748:	4013      	ands	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4923      	ldr	r1, [pc, #140]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	491f      	ldr	r1, [pc, #124]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001770:	4013      	ands	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4919      	ldr	r1, [pc, #100]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	4915      	ldr	r1, [pc, #84]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001798:	4013      	ands	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	3301      	adds	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f aeaf 	bne.w	8001510 <HAL_GPIO_Init+0x14>
  }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	372c      	adds	r7, #44	; 0x2c
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	10320000 	.word	0x10320000
 80017c4:	10310000 	.word	0x10310000
 80017c8:	10220000 	.word	0x10220000
 80017cc:	10210000 	.word	0x10210000
 80017d0:	10120000 	.word	0x10120000
 80017d4:	10110000 	.word	0x10110000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40010c00 	.word	0x40010c00
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800180c:	e003      	b.n	8001816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	041a      	lsls	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	611a      	str	r2, [r3, #16]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43d9      	mvns	r1, r3
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	400b      	ands	r3, r1
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	611a      	str	r2, [r3, #16]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
	...

08001854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e26c      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8087 	beq.w	8001982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001874:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b04      	cmp	r3, #4
 800187e:	d00c      	beq.n	800189a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001880:	4b8f      	ldr	r3, [pc, #572]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d112      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
 800188c:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d10b      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d06c      	beq.n	8001980 <HAL_RCC_OscConfig+0x12c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d168      	bne.n	8001980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e246      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x76>
 80018bc:	4b80      	ldr	r3, [pc, #512]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a7f      	ldr	r2, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e02e      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01d      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0xbc>
 80018f6:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 8001910:	4b6b      	ldr	r3, [pc, #428]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a67      	ldr	r2, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fccc 	bl	80012cc <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fcc8 	bl	80012cc <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1fa      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0xe4>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fcb8 	bl	80012cc <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fcb4 	bl	80012cc <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1e6      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x10c>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198e:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1ba      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4939      	ldr	r1, [pc, #228]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fc6d 	bl	80012cc <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fc69 	bl	80012cc <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e19b      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4927      	ldr	r1, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fc4c 	bl	80012cc <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff fc48 	bl	80012cc <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e17a      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d03a      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fc2c 	bl	80012cc <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff fc28 	bl	80012cc <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e15a      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 fa9a 	bl	8001fd0 <RCC_Delay>
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fc12 	bl	80012cc <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aaa:	e00f      	b.n	8001acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fc0e 	bl	80012cc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d908      	bls.n	8001acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e140      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	42420000 	.word	0x42420000
 8001ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e9      	bne.n	8001aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a6 	beq.w	8001c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	4b97      	ldr	r3, [pc, #604]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10d      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b94      	ldr	r3, [pc, #592]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a93      	ldr	r2, [pc, #588]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b91      	ldr	r3, [pc, #580]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a8a      	ldr	r2, [pc, #552]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fbcf 	bl	80012cc <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff fbcb 	bl	80012cc <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b64      	cmp	r3, #100	; 0x64
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0fd      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x312>
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	e02d      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x334>
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a75      	ldr	r2, [pc, #468]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b73      	ldr	r3, [pc, #460]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a72      	ldr	r2, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	e01c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCC_OscConfig+0x356>
 8001b90:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a6c      	ldr	r2, [pc, #432]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	e00b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	4b64      	ldr	r3, [pc, #400]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a63      	ldr	r2, [pc, #396]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d015      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fb7f 	bl	80012cc <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff fb7b 	bl	80012cc <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0ab      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ee      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x37e>
 8001bf4:	e014      	b.n	8001c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fb69 	bl	80012cc <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fb65 	bl	80012cc <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e095      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c26:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8081 	beq.w	8001d3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d061      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d146      	bne.n	8001cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb39 	bl	80012cc <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fb35 	bl	80012cc <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e067      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d108      	bne.n	8001c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	492d      	ldr	r1, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a19      	ldr	r1, [r3, #32]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	4927      	ldr	r1, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb09 	bl	80012cc <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fb05 	bl	80012cc <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e037      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46a>
 8001cdc:	e02f      	b.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff faf2 	bl	80012cc <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff faee 	bl	80012cc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e020      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x498>
 8001d0a:	e018      	b.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e013      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420060 	.word	0x42420060

08001d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0d0      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4965      	ldr	r1, [pc, #404]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0b8      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db0:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	494d      	ldr	r1, [pc, #308]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d040      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d115      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e07f      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e073      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e06b      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f023 0203 	bic.w	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4936      	ldr	r1, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e44:	f7ff fa42 	bl	80012cc <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7ff fa3e 	bl	80012cc <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e053      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 020c 	and.w	r2, r3, #12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1eb      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d210      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4922      	ldr	r1, [pc, #136]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e032      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4916      	ldr	r1, [pc, #88]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	490e      	ldr	r1, [pc, #56]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ee2:	f000 f821 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	490a      	ldr	r1, [pc, #40]	; (8001f1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	5ccb      	ldrb	r3, [r1, r3]
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1cc>)
 8001efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1d0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f9a0 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08002834 	.word	0x08002834
 8001f20:	20000024 	.word	0x20000024
 8001f24:	20000028 	.word	0x20000028

08001f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x30>
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x36>
 8001f56:	e027      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5a:	613b      	str	r3, [r7, #16]
      break;
 8001f5c:	e027      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	0c9b      	lsrs	r3, r3, #18
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f68:	5cd3      	ldrb	r3, [r2, r3]
 8001f6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d010      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0c5b      	lsrs	r3, r3, #17
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f82:	5cd3      	ldrb	r3, [r2, r3]
 8001f84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8a:	fb02 f203 	mul.w	r2, r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e004      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f9c:	fb02 f303 	mul.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	613b      	str	r3, [r7, #16]
      break;
 8001fa6:	e002      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001faa:	613b      	str	r3, [r7, #16]
      break;
 8001fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fae:	693b      	ldr	r3, [r7, #16]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	007a1200 	.word	0x007a1200
 8001fc4:	08002844 	.word	0x08002844
 8001fc8:	08002854 	.word	0x08002854
 8001fcc:	003d0900 	.word	0x003d0900

08001fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <RCC_Delay+0x34>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <RCC_Delay+0x38>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0a5b      	lsrs	r3, r3, #9
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fec:	bf00      	nop
  }
  while (Delay --);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	60fa      	str	r2, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f9      	bne.n	8001fec <RCC_Delay+0x1c>
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20000024 	.word	0x20000024
 8002008:	10624dd3 	.word	0x10624dd3

0800200c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e041      	b.n	80020a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff f870 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f000 fa56 	bl	80024fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d001      	beq.n	80020c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e035      	b.n	8002130 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_TIM_Base_Start_IT+0x90>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d009      	beq.n	80020fa <HAL_TIM_Base_Start_IT+0x4e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ee:	d004      	beq.n	80020fa <HAL_TIM_Base_Start_IT+0x4e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_TIM_Base_Start_IT+0x94>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d111      	bne.n	800211e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b06      	cmp	r3, #6
 800210a:	d010      	beq.n	800212e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211c:	e007      	b.n	800212e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40012c00 	.word	0x40012c00
 8002140:	40000400 	.word	0x40000400

08002144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d020      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0202 	mvn.w	r2, #2
 8002178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f998 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f98b 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f99a 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d020      	beq.n	80021f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0204 	mvn.w	r2, #4
 80021c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f972 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 80021e0:	e005      	b.n	80021ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f965 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f974 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d020      	beq.n	8002240 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0208 	mvn.w	r2, #8
 8002210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2204      	movs	r2, #4
 8002216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f94c 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f93f 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f94e 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d020      	beq.n	800228c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01b      	beq.n	800228c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0210 	mvn.w	r2, #16
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2208      	movs	r2, #8
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f926 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f919 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f928 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00c      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0201 	mvn.w	r2, #1
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fea2 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa6f 	bl	80027b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00c      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f8f8 	bl	80024e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00c      	beq.n	800231c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0220 	mvn.w	r2, #32
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fa42 	bl	80027a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_TIM_ConfigClockSource+0x1c>
 800233c:	2302      	movs	r3, #2
 800233e:	e0b4      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x186>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800235e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002378:	d03e      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0xd4>
 800237a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237e:	f200 8087 	bhi.w	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002386:	f000 8086 	beq.w	8002496 <HAL_TIM_ConfigClockSource+0x172>
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	d87f      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 8002390:	2b70      	cmp	r3, #112	; 0x70
 8002392:	d01a      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0xa6>
 8002394:	2b70      	cmp	r3, #112	; 0x70
 8002396:	d87b      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 8002398:	2b60      	cmp	r3, #96	; 0x60
 800239a:	d050      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x11a>
 800239c:	2b60      	cmp	r3, #96	; 0x60
 800239e:	d877      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023a0:	2b50      	cmp	r3, #80	; 0x50
 80023a2:	d03c      	beq.n	800241e <HAL_TIM_ConfigClockSource+0xfa>
 80023a4:	2b50      	cmp	r3, #80	; 0x50
 80023a6:	d873      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d058      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x13a>
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d86f      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023b0:	2b30      	cmp	r3, #48	; 0x30
 80023b2:	d064      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	2b30      	cmp	r3, #48	; 0x30
 80023b6:	d86b      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d060      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d867      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05c      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d05a      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023c8:	e062      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f000 f96a 	bl	80026b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	609a      	str	r2, [r3, #8]
      break;
 80023f6:	e04f      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6899      	ldr	r1, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f000 f953 	bl	80026b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800241a:	609a      	str	r2, [r3, #8]
      break;
 800241c:	e03c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	461a      	mov	r2, r3
 800242c:	f000 f8ca 	bl	80025c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2150      	movs	r1, #80	; 0x50
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f921 	bl	800267e <TIM_ITRx_SetConfig>
      break;
 800243c:	e02c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	461a      	mov	r2, r3
 800244c:	f000 f8e8 	bl	8002620 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2160      	movs	r1, #96	; 0x60
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f911 	bl	800267e <TIM_ITRx_SetConfig>
      break;
 800245c:	e01c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	461a      	mov	r2, r3
 800246c:	f000 f8aa 	bl	80025c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2140      	movs	r1, #64	; 0x40
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f901 	bl	800267e <TIM_ITRx_SetConfig>
      break;
 800247c:	e00c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f000 f8f8 	bl	800267e <TIM_ITRx_SetConfig>
      break;
 800248e:	e003      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e000      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <TIM_Base_SetConfig+0xc0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d007      	beq.n	8002524 <TIM_Base_SetConfig+0x28>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d003      	beq.n	8002524 <TIM_Base_SetConfig+0x28>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <TIM_Base_SetConfig+0xc4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d108      	bne.n	8002536 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a20      	ldr	r2, [pc, #128]	; (80025bc <TIM_Base_SetConfig+0xc0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d007      	beq.n	800254e <TIM_Base_SetConfig+0x52>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002544:	d003      	beq.n	800254e <TIM_Base_SetConfig+0x52>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <TIM_Base_SetConfig+0xc4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d108      	bne.n	8002560 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <TIM_Base_SetConfig+0xc0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d103      	bne.n	8002594 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f023 0201 	bic.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]
  }
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400

080025c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f023 0201 	bic.w	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f023 030a 	bic.w	r3, r3, #10
 8002600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	621a      	str	r2, [r3, #32]
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	f023 0210 	bic.w	r2, r3, #16
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800264a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	031b      	lsls	r3, r3, #12
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800265c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	621a      	str	r2, [r3, #32]
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	f043 0307 	orr.w	r3, r3, #7
 80026a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b087      	sub	sp, #28
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	021a      	lsls	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4313      	orrs	r3, r2
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002704:	2302      	movs	r3, #2
 8002706:	e041      	b.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002754:	d004      	beq.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10c      	bne.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	4313      	orrs	r3, r2
 8002770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40012c00 	.word	0x40012c00
 800279c:	40000400 	.word	0x40000400

080027a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <__libc_init_array>:
 80027c4:	b570      	push	{r4, r5, r6, lr}
 80027c6:	2600      	movs	r6, #0
 80027c8:	4d0c      	ldr	r5, [pc, #48]	; (80027fc <__libc_init_array+0x38>)
 80027ca:	4c0d      	ldr	r4, [pc, #52]	; (8002800 <__libc_init_array+0x3c>)
 80027cc:	1b64      	subs	r4, r4, r5
 80027ce:	10a4      	asrs	r4, r4, #2
 80027d0:	42a6      	cmp	r6, r4
 80027d2:	d109      	bne.n	80027e8 <__libc_init_array+0x24>
 80027d4:	f000 f822 	bl	800281c <_init>
 80027d8:	2600      	movs	r6, #0
 80027da:	4d0a      	ldr	r5, [pc, #40]	; (8002804 <__libc_init_array+0x40>)
 80027dc:	4c0a      	ldr	r4, [pc, #40]	; (8002808 <__libc_init_array+0x44>)
 80027de:	1b64      	subs	r4, r4, r5
 80027e0:	10a4      	asrs	r4, r4, #2
 80027e2:	42a6      	cmp	r6, r4
 80027e4:	d105      	bne.n	80027f2 <__libc_init_array+0x2e>
 80027e6:	bd70      	pop	{r4, r5, r6, pc}
 80027e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ec:	4798      	blx	r3
 80027ee:	3601      	adds	r6, #1
 80027f0:	e7ee      	b.n	80027d0 <__libc_init_array+0xc>
 80027f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f6:	4798      	blx	r3
 80027f8:	3601      	adds	r6, #1
 80027fa:	e7f2      	b.n	80027e2 <__libc_init_array+0x1e>
 80027fc:	08002858 	.word	0x08002858
 8002800:	08002858 	.word	0x08002858
 8002804:	08002858 	.word	0x08002858
 8002808:	0800285c 	.word	0x0800285c

0800280c <memset>:
 800280c:	4603      	mov	r3, r0
 800280e:	4402      	add	r2, r0
 8002810:	4293      	cmp	r3, r2
 8002812:	d100      	bne.n	8002816 <memset+0xa>
 8002814:	4770      	bx	lr
 8002816:	f803 1b01 	strb.w	r1, [r3], #1
 800281a:	e7f9      	b.n	8002810 <memset+0x4>

0800281c <_init>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr

08002828 <_fini>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	bf00      	nop
 800282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282e:	bc08      	pop	{r3}
 8002830:	469e      	mov	lr, r3
 8002832:	4770      	bx	lr
